<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-3.0.xsd
                             http://www.springframework.org/schema/beans
                             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                             http://www.springframework.org/schema/tx
                             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                             http://www.springframework.org/schema/cache
                             http://www.springframework.org/schema/cache/spring-cache.xsd">
    <context:property-placeholder location="classpath*:jdbc.properties,classpath*:redis-config.properties"></context:property-placeholder>
    <!--<context:property-placeholder location="classpath*:redis-config.properties"></context:property-placeholder>-->
    <context:annotation-config></context:annotation-config>
    <!--<cache:annotation-driven cache-manager="cacheManager"></cache:annotation-driven>-->
    <!--自动扫描注解类，并类交给spring管理-->
    <context:component-scan base-package="com.how2java.tmall.service"/>
    <context:component-scan base-package="com.how2java.tmall.shiro"/>
    <!--redis的相关配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <!-- 最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.maxWait}"></property>
        <!-- 返回连接时，检测连接是否成功 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
        <property name="maxTotal" value="${redis.maxTotal}"></property>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
        p:hostName="${redis.host}" p:port="${redis.port}" p:password="" p:poolConfig-ref="poolConfig"
    ></bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
    </bean>
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
    </bean>
    <!--用来解决RedisCache.jedisConnectionFactory的静态注入-->
    <bean id="redisCacheTransfer" class="com.how2java.tmall.cache.RedisCacheTransfer">
        <property name="jedisConnectionFactory" ref="jedisConnectionFactory"></property>
    </bean>
    <!--<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
        <!--<property name="caches">-->
            <!--<set>-->
                <!--&lt;!&ndash;<bean class="com.how2java.tmall.cache.RedisCache">&ndash;&gt;-->
                    <!--&lt;!&ndash;<property name="redisTemplate" ref="redisTemplate"></property>&ndash;&gt;-->
                    <!--&lt;!&ndash;<property name="name" value="simpleObject"></property>&ndash;&gt;-->
                <!--&lt;!&ndash;</bean>&ndash;&gt;-->
                <!--<bean class="com.how2java.tmall.cache.RedisCache">-->
                    <!--<property name="redisTemplate" ref="redisTemplate"></property>-->
                    <!--<property name="name" value="adminUser"></property>-->
                <!--</bean>-->
                <!--<bean class="com.how2java.tmall.cache.RedisCache">-->
                    <!--<property name="redisTemplate" ref="redisTemplate"></property>-->
                    <!--<property name="name" value="role"></property>-->
                <!--</bean>-->
                <!--<bean class="com.how2java.tmall.cache.RedisCache">-->
                    <!--<property name="redisTemplate" ref="redisTemplate"></property>-->
                    <!--<property name="name" value="menu"></property>-->
                <!--</bean>-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!---->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <property name="maxWait" value="60000"/>

        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 1"/>

        <!--<property name="testWhileIdle" value="true"/>-->
        <!--<property name="testOnBorrow" value="false"/>-->
        <!--<property name="testOnReturn" value="false"/>-->
        <!--用于缓存PreparedStatements,对支持游标的数据库性能提升巨大,如oracle.mysql下建议关闭-->
        <!--<property name="poolPreparedStatements" value="true"/>-->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>-->
    </bean>
    <!--Mybatis的SessionFactory配置-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="typeAliasesPackage" value="com.how2java.tmall.pojo"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <!--分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value></value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!---->
    <!-- EhCache library setup -->
    <!--<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:configLocation="ehcache.xml"/>-->
    <!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cacheManager-ref="ehcache"/>-->


    <!--Mybatis的Mapper文件识别-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.how2java.tmall.mapper"></property>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--shiro-->
    <!--自定义Realm-->
    <bean id="adminUserRealm" class="com.how2java.tmall.shiro.AdminUserRealm"></bean>
    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="adminUserRealm"/>
    </bean>

    <!--shiro过滤器 核心-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/admin/index.jsp"/>
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/admin/nopower.jsp"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!--anon 表示匿名访问，不需要认证以及授权-->
                /checkLogin*=anon

                <!--authc表示需要认证 没有进行身份认证是不能进行访问的-->
                /admin*=authc
            </value>
        </property>
    </bean>
    <!--保证实现了Shiro内部lifecycle函数的bean执行-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--开启Shiro注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>